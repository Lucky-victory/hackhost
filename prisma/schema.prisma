// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String                 @id @default(uuid())
  name          String
  email         String                 @unique
  password      String?
  createdAt     DateTime               @default(now()) @map("created_at")
  updatedAt     DateTime               @updatedAt @map("updated_at")
  bio           String?
  jobTitle      String?                @map("job_title")
  interest      UserInterest[]
  skills        UserSkills[]
  avatar        String?
  banner        String?
  role          USER_ROLE              @default(BASIC)
  username      String?
  location      String?
  authType      USER_AUTH_TYPE         @default(CREDENTIALS)
  projects      Project[]
  hackathon     Hackathon[]
  participants  HackathonParticipant[]
  HackathonTags HackathonTags[]

  @@index([email, jobTitle, name])
  @@map("users")
}

model UserInterest {
  id     String  @id @default(uuid())
  name   String
  user   User?   @relation(fields: [userId], references: [id])
  userId String? @map("user_id")

  @@index([name])
  @@map("user_interest")
}

model UserSkills {
  id     String  @id @default(uuid())
  name   String
  user   User?   @relation(fields: [userId], references: [id])
  userId String? @map("user_id")

  @@index([name])
  @@map("user_skills")
}

model Project {
  id            String             @id @default(uuid())
  title         String
  description   String
  screenshotUrl String             @map("screenshot_url")
  repoUrl       String             @map("repo_url")
  demoUrl       String             @map("demo_url")
  fileUrl       String             @map("file_url")
  user          User               @relation(fields: [userId], references: [id])
  slug          String             @unique
  category      String?
  toolsUsed     ProjectToolsUsed[]
  createdAt     DateTime           @default(now()) @map("created_at")
  updatedAt     DateTime           @updatedAt @map("updated_at")
  userId        String             @map("user_id")
  hackathon     Hackathon          @relation(fields: [hackathonId], references: [id])
  hackathonId   String             @map("hackathon_id")
  isWinner      Boolean            @default(false) @map("is_winner")
  status        PROJECT_STATUS     @default(DRAFT)

  @@index([title, description, slug])
  @@map("projects")
}

model ProjectToolsUsed {
  id      String    @id @default(uuid())
  name    String    @unique
  project Project[]

  @@index([name])
  @@map("project_tools_used")
}

model Hackathon {
  id          String   @id @default(uuid())
  title       String
  subtitle    String?
  description String
  startDate   DateTime @map("start_date")
  endDate     DateTime @map("end_date")
  user        User     @relation(fields: [userId], references: [id])
  slug        String   @unique

  tags         HackathonTags[]
  createdAt    DateTime               @default(now()) @map("created_at")
  updatedAt    DateTime               @updatedAt @map("updated_at")
  userId       String                 @map("user_id")
  price        Int                    @map("price")
  currency     String
  currencyCode String?                @map("currency_code")
  participants HackathonParticipant[]
  projects     Project[]
  type         HACKATHON_TYPE?        @default(PUBLIC)
  status       HACKATHON_STATUS?      @default(DRAFT)
  judges       HackathonJudges[]
  subStatus    HACKATHON_SUB_STATUS?  @default(ONGOING) @map("sub_status")

  @@index([title, description, slug, type, price, status])
  @@map("hackathons")
}
model HackathonParticipant {
  id          String    @id @default(uuid())
  hackathon   Hackathon @relation(fields: [hackathonId], references: [id])
  hackathonId String    @map("hackathon_id")
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @map("user_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("hackathon_participants")
}
model HackathonJudges {
  id          String    @id @default(uuid())
  hackathonId String    @map("hackathon_id")
  name        String
  bio         String?
  avatar      String?
  hackathon   Hackathon @relation(fields: [hackathonId], references: [id])

  @@map("hackathon_judges")
}

model HackathonTags {
  id        String      @id @default(uuid())
  name      String      @unique
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")
  hackathon Hackathon[]
  user      User?       @relation(fields: [userId], references: [id])
  userId    String?     @map("user_id")

  @@index([name])
  @@map("hackathon_categories")
}



enum USER_ROLE {
  BASIC
  ADMIN
  MOD
}

enum HACKATHON_SUB_STATUS {
  ONGOING
  ENDED
  UPCOMING
}

enum HACKATHON_STATUS {
  PUBLISHED
  DRAFT
}

enum PROJECT_STATUS {
  PUBLISHED
  DRAFT
}

enum HACKATHON_TYPE {
  PUBLIC
  PRIVATE
}

enum USER_AUTH_TYPE {
  CREDENTIALS
  GITHUB
  GOOGLE
}
